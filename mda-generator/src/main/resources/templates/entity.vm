package $javaClass.getPackageName();
## IMPORTS
import java.io.Serializable;
#foreach( $import in $javaClass.getImportsList() )
import $import;
#end

## COMMENTS
/**
#foreach( $comment in $javaClass.getCommentsList() )
 * $comment
#end
 *
 * This file has been automatically generated
 */
## ANNOTATIONS
#foreach( $annotation in $javaClass.getAnnotationsList() )
$annotation.getDisplay("")
#end
## USER DEFINED ANNOTATIONS
#if($javaClass.getUserDefinedAnnotations())
#foreach( $annotation in $javaClass.getUserDefinedAnnotations() )
$annotation
#end
#end
## CLASS DECLARATION
$javaClass.getVisibilite().toString() class $javaClass.getName() implements Serializable {
	/** Serial ID */
	private static final long serialVersionUID = 1L;

## COMPOSITE KEY
#if($javaClass.getPkClass())
	@EmbeddedId
	$javaClass.getPkField().getJavaType() $javaClass.getPkField().getName();
#end
## ATTRIBUTES
#foreach( $attribute in $javaClass.getAttributesList() )
	$attribute.getVisibility().toString() $attribute.getJavaType() $attribute.getName()#if($attribute.getDefaultValue()) = $attribute.getDefaultValue()#end;
#end

## METHODS
#foreach( $method in $javaClass.getMethodsList() )
## METHOD COMMENTS
	/**
#foreach( $comment in $method.getCommentsList() )
	 * $comment
#end
	 */
## METHOD ANNOTATION
#foreach( $annotation in $method.getAnnotationsList() )
$annotation.getDisplay("	")
#end
## METHOD DECLARATION
	$method.getVisibility().toString() $method.getReturnType() $method.getName()($method.getDisplayArgs()){
## METHOD BODY
#foreach($contentLine in $method.getContentLines())
		$contentLine;
#end
	}
#end

## hashcode and equals
	@Override
	public int hashCode(){
	 	// Start with a non-zero constant. Prime is preferred
	    int result = 17;
	
		// Calculating hashcode with all "primitives" attributes
		#foreach( $attribute in $javaClass.getAttributesList() )
		#if(!$attribute.getName().equals("serialVersionUID") && $attribute.isPrimitive())
		result = 31 * result + ($attribute.getName() == null? 0 : ${attribute.getName()}.hashCode());
		#end
		#end
			
		return result;
	}

	@Override
	public boolean equals(Object other){
		// Null object
	    if(other == null){
	    	return false;
	    }
	
		// Same object
	    if (this == other) {
	        return true;
	    }
	    	
		// Wrong type
	    if (this.getClass() !=  other.getClass()) {
	        return false;
	    }
	
		// Test all "primitives" attributes
	    $javaClass.getName() other$javaClass.getName() = ($javaClass.getName()) other;
	    
		return#foreach( $attribute in $javaClass.getAttributesList() )
		#if($attribute.isPrimitive())
#if($foreach.count>1)			&&#end ($attribute.getName() == null ?  (other${javaClass.getName()}.$attribute.getName() == null) : ${attribute.getName()}.equals(other${javaClass.getName()}.$attribute.getName()))
		#end
#end		;
	}

## END OF CLASS
$end_of_generated
#if ( $keep_content )$content_to_keep#else}#end
